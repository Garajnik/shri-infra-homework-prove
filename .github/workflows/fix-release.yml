name: Fix-release Workflow

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version"
        required: true
        type: string

env:
  RELEASE_VERSION: ${{ github.event.inputs.release_version }}
  YCR_REGISTRY_ID: ${{ secrets.YCR_ID }}
  YCR_TOKEN: ${{ secrets.YCR_TOKEN }}

jobs:
  checkout-release-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: releases/${{ github.event.inputs.release_version }}

  lint-and-test:
    needs: checkout-release-branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: releases/${{ github.event.inputs.release_version }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - run: npm ci
      - run: npm run lint
      - run: npm run test

  build-and-push-docker-image:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: releases/${{ github.event.inputs.release_version }}

      - name: Log in to YCR
        run: echo "${{ secrets.YCR_TOKEN }}" | docker login --username oauth --password-stdin cr.yandex

      - name: Build Docker image
        run: |
          IMAGE_NAME="${YCR_REGISTRY_ID}/app:${RELEASE_VERSION}_fix${{ github.run_number }}"
          IMAGE_LATEST="${YCR_REGISTRY_ID}/app:${RELEASE_VERSION}_latest"
          docker build -t $IMAGE_NAME -t $IMAGE_LATEST .

      - name: Push Docker image to YCR
        run: |
          IMAGE_NAME="${YCR_REGISTRY_ID}/app:${RELEASE_VERSION}_fix${{ github.run_number }}"
          IMAGE_LATEST="${YCR_REGISTRY_ID}/app:${RELEASE_VERSION}_latest"
          docker push $IMAGE_NAME
          docker push $IMAGE_LATEST

  create-fix-tag:
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: releases/${{ github.event.inputs.release_version }}

      - name: Create Fix Tag
        run: |
          FIX_NUM=${{ github.run_number }}
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git tag v${RELEASE_VERSION}_fix${FIX_NUM}
          git push origin v${RELEASE_VERSION}_fix${FIX_NUM}

  get-previous-tag:
    needs: create-fix-tag
    runs-on: ubuntu-latest
    outputs:
      prev_tag: ${{ steps.get_prev_tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: releases/${{ github.event.inputs.release_version }}

      - name: Get previous tag
        id: get_prev_tag
        run: |
          git fetch --tags
          PREV=$(git tag --sort=-creatordate | grep -E "^(v)?${RELEASE_VERSION}(_fix[0-9]+)?$" | head -n 2 | tail -n 1 || echo "")
          echo "tag=$PREV" >> $GITHUB_OUTPUT
  
  get-commit-list:
    needs: get-previous-tag
    runs-on: ubuntu-latest
    outputs:
      commit_list: ${{ steps.commit_list.outputs.commits }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: releases/${{ github.event.inputs.release_version }}

      - name: Generate commit list since previous tag
        id: commit_list
        run: |
          PREV_TAG=${{ needs.get-previous-tag.outputs.prev_tag }}
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found, listing all commits"
            git log --oneline > commits.txt
          else
            echo "Listing commits since $PREV_TAG"
            git log $PREV_TAG..HEAD --oneline > commits.txt
          fi
          # Make markdown formatted commit list
          echo "**Commits since \`$PREV_TAG\`:**" > formatted_commits.txt
          cat commits.txt >> formatted_commits.txt
          # Save output for next job
          echo "::set-output name=commits::$(cat formatted_commits.txt)"

  comment-on-issue:
    needs: [get-commit-list, build-and-push-docker-image]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code (for gh CLI)
        uses: actions/checkout@v4

      - name: Comment on GitHub issue with fix info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AUTHOR: ${{ github.actor }}
          VERSION: ${{ github.event.inputs.release_version }}
          REGISTRY: ${{ secrets.YCR_ID }}
          FIX_NUMBER: ${{ github.run_number }}
          COMMIT_LIST: ${{ needs.get-commit-list.outputs.commit_list }}
        run: |
          ISSUE_NUMBER=$(gh issue list --limit 1 --search "Release $VERSION" --json number --jq '.[0].number' || echo "")
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "No matching issue found for Release $VERSION, skipping comment."
            exit 0
          fi

          BODY=$(printf "üõ† Fix \`#%s\` for Release **v%s**\nüìÖ Date: %s\nüë§ Author: @%s\nüê≥ Docker Image: `%s/app:%s_fix%s`\n\n%s\n" \
            "$FIX_NUMBER" "$VERSION" "$(date -u +"%Y-%m-%d %H:%M UTC")" "$AUTHOR" "$REGISTRY" "$VERSION" "$FIX_NUMBER" "$COMMIT_LIST")

          gh issue comment "$ISSUE_NUMBER" --body "$BODY"