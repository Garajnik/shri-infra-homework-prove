name: Fix-release Workflow

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version"
        required: true
        type: string

env:
  RELEASE_VERSION: ${{ github.event.inputs.release_version }}
  YCR_REGISTRY_ID: ${{ secrets.YCR_ID }}
  YCR_TOKEN: ${{ secrets.YCR_TOKEN }}

jobs:
  checkout-release-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: releases/${{ github.event.inputs.release_version }}

  lint-and-test:
    needs: checkout-release-branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - run: npm ci
      - run: npm run lint
      - run: npm run test

  build-and-push-docker-image:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: releases/${{ github.event.inputs.release_version }}

      - name: Log in to YCR
        run: echo "${{ secrets.YCR_TOKEN }}" | docker login --username oauth --password-stdin cr.yandex

      - name: Build Docker image
        run: |
          IMAGE_NAME="${YCR_REGISTRY_ID}/app:${RELEASE_VERSION}_fix${{ github.run_number }}"
          IMAGE_LATEST="${YCR_REGISTRY_ID}/app:${RELEASE_VERSION}_latest"
          docker build -t $IMAGE_NAME -t $IMAGE_LATEST .

      - name: Push Docker image to YCR
        run: |
          IMAGE_NAME="${YCR_REGISTRY_ID}/app:${RELEASE_VERSION}_fix${{ github.run_number }}"
          IMAGE_LATEST="${YCR_REGISTRY_ID}/app:${RELEASE_VERSION}_latest"
          docker push $IMAGE_NAME
          docker push $IMAGE_LATEST

  create-fix-tag:
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: releases/${{ github.event.inputs.release_version }}

      - name: Create Fix Tag
        run: |
          FIX_NUM=${{ github.run_number }}
          git tag v${RELEASE_VERSION}_fix${FIX_NUM}
          git push origin v${RELEASE_VERSION}_fix${FIX_NUM}

  create-fix-issue:
    needs: create-fix-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: releases/${{ github.event.inputs.release_version }}

      - name: Get previous tag
        id: prev_tag
        run: |
          git fetch --tags
          PREV_TAG=$(git describe --tags --abbrev=0 --match "v${{ env.VERSION }}*" --exclude "v${{ env.VERSION }}_${{ env.FIX }}" 2>/dev/null || echo "v${{ env.VERSION }}")
          echo "previous_tag=${PREV_TAG}" >> $GITHUB_OUTPUT

      - name: Get commit list
        run: |
          echo "**Commits since \`${{ steps.prev_tag.outputs.tag }}\`:**" > commits.txt
          git log ${{ steps.prev_tag.outputs.tag }}..HEAD --oneline >> commits.txt || echo "No new commits" >> commits.txt

      - name: Create Fix Issue Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FIX_NUM: ${{ github.run_number }}
          AUTHOR: ${{ github.actor }}
          YCR_REGISTRY_ID: ${{ env.YCR_REGISTRY_ID }}
        run: |
          VERSION="${{ env.RELEASE_VERSION }}"
          FIX="$FIX_NUM"
          DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ISSUE_NUMBER=$(gh issue list --label release --search "Release ${VERSION}" --json number --jq '.[0].number')
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "Issue –¥–ª—è —Ä–µ–ª–∏–∑–∞ ${VERSION} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            exit 1
          fi

          BODY=$(printf "üõ† Fix \`#%s\` for Release **v%s**\nüìÖ –î–∞—Ç–∞: %s\nüë§ –ê–≤—Ç–æ—Ä: @%s\nüê≥ Docker Image: \`%s:%s_fix%s\`\n\n%s" \
            "$FIX" "$VERSION" "$DATE" "$AUTHOR" "$YCR_REGISTRY_ID" "$VERSION" "$FIX" "$(cat commits.txt)")
          gh issue comment "$ISSUE_NUMBER" --body "$BODY"